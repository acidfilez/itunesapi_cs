//
//  SearchViewController.swift
//  itunesapi_cs
//
//  Created by Alejandro Melo Domínguez on 7/27/19.
//  Copyright (c) 2019 Alejandro Melo Domínguez. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchDisplayLogic: class {
    func displayResults(viewModel: Search.ViewModel)
    func displayNoResults()
}

class SearchViewController: UIViewController, SearchDisplayLogic {
    var interactor: SearchBusinessLogic?
    var router: (NSObjectProtocol & SearchRoutingLogic & SearchDataPassing)?

    var medias: [Media] = []

    private weak var noResultsLabel: UILabel?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = SearchInteractor()
        let presenter = SearchPresenter()
        let router = SearchRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
//        interactor?.startSearch(request: Search.Request(searchTerm: "epica", page: 1), localResultsOnly: false)
    }

    func displayResults(viewModel: Search.ViewModel) {
        medias = viewModel.medias
    }

    func displayNoResults() {
        medias = []

        noResultsLabel?.removeFromSuperview()

        let message = UILabel(frame: view.bounds)
        message.backgroundColor = .white
        message.textColor = .darkGray
        message.text = "No hay resultados."
        message.textAlignment = .center

        view.addSubview(message)
        view.bringSubviewToFront(message)

        noResultsLabel = message
    }
}
