//
//  SearchViewController.swift
//  itunesapi_cs
//
//  Created by Alejandro Melo Domínguez on 7/27/19.
//  Copyright (c) 2019 Alejandro Melo Domínguez. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import ICSPullToRefresh
import UIKit

protocol SearchDisplayLogic: class {
    func displayResults(viewModel: Search.ViewModel)
    func displayNoResults()
    func hideNoResults()

    func showLoadingIndicator()
    func hideLoadingIndicator()

    func routeToMediaDetails(viewModel: Search.DetailsViewModel)
}

class SearchViewController: UIViewController, SearchDisplayLogic {
    var interactor: SearchBusinessLogic?
    var router: (NSObjectProtocol & SearchRoutingLogic & SearchDataPassing)?

    var medias: [Media] = []

    @IBOutlet weak var tableView: UITableView!
    private weak var noResultsLabel: UILabel?

    let searchController = UISearchController(searchResultsController: nil)
    weak var activityIndicator: UIActivityIndicatorView?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = SearchInteractor()
        let presenter = SearchPresenter()
        let router = SearchRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        tableView.dataSource = self
        tableView.delegate = self

        setupSearchController()
        setupInfiniteScrolling()
    }

    func setupInfiniteScrolling() {
        tableView.addInfiniteScrollingWithHandler {
            guard let term = self.searchController.searchBar.text?.lowercased() else {
                self.tableView.infiniteScrollingView?.stopAnimating()
                self.interactor?.startSearch(request: Search.Request(searchTerm: "", page: 1))
                return
            }

            let request = Search.Request(
                searchTerm: term,
                page: 0 // no importa, nextPage calcula sola la siguiente página
            )

            self.interactor?.nextPage(request: request)
        }
    }

    func displayResults(viewModel: Search.ViewModel) {
        medias = viewModel.medias
        tableView.reloadData()
        tableView.infiniteScrollingView?.stopAnimating()

        if medias.isEmpty {
            self.tableView.beginUpdates()
            self.tableView.setContentOffset(.zero, animated: true)
            self.tableView.endUpdates()
        }
    }

    func displayNoResults() {
        medias = []
        hideNoResults()

        let message = UILabel(frame: view.bounds)
        message.backgroundColor = .white
        message.textColor = .darkGray
        message.text = "No hay resultados."
        message.textAlignment = .center

        view.addSubview(message)
        view.bringSubviewToFront(message)

        noResultsLabel = message

        tableView.infiniteScrollingView?.stopAnimating()
    }

    func hideNoResults() {
        noResultsLabel?.removeFromSuperview()
    }

    func showLoadingIndicator() {
        let indicator = UIActivityIndicatorView()
        indicator.backgroundColor = UIColor.black.withAlphaComponent(0.6)
        indicator.hidesWhenStopped = true
        indicator.clipsToBounds = true
        indicator.layer.cornerRadius = 8.0

        searchController.searchBar.isUserInteractionEnabled = false
        view.isUserInteractionEnabled = false

        view.addSubview(indicator)
        view.bringSubviewToFront(indicator)

        indicator.translatesAutoresizingMaskIntoConstraints = false
        indicator.widthAnchor.constraint(equalToConstant: 60).isActive = true
        indicator.heightAnchor.constraint(equalToConstant: 60).isActive = true
        indicator.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
        indicator.centerYAnchor.constraint(equalTo: view.centerYAnchor).isActive = true

        activityIndicator = indicator
        activityIndicator?.startAnimating()
    }

    func hideLoadingIndicator() {
        activityIndicator?.stopAnimating()
        activityIndicator?.removeFromSuperview()

        searchController.searchBar.isUserInteractionEnabled = true
        view.isUserInteractionEnabled = true
    }

    func routeToMediaDetails(viewModel: Search.DetailsViewModel) {
        router?.routeToDetails()
    }
}

// MARK: - UITableView

extension SearchViewController: UITableViewDataSource {
    static let contentCellIdentifier = "SearchTableViewCell"
    static let emptyCellIdentifier = "SearchEmptyTableViewCell"

    // MARK: Data source

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        guard medias.count != 0 else { return 1 }
        return medias.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cellIdentifier = medias.count != 0 ? SearchViewController.contentCellIdentifier : SearchViewController.emptyCellIdentifier
        let abstractCell: UITableViewCell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier, for: indexPath)

        if let cell = abstractCell as? SearchTableViewCell {
            cell.media = medias[indexPath.row]
        }

        return abstractCell
    }
}

extension SearchViewController: UITableViewDelegate {
    // MARK: Delegate

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)

        let media = medias[indexPath.row]
        let request = Search.DetailsRequest(media: media)
        interactor?.didSelectMedia(request: request)
    }
}

// MARK: - UISearchController
extension SearchViewController {
    func setupSearchController() {
        let attributes = [
            NSAttributedString.Key.foregroundColor: UIColor.white
        ]

        let appearance = UIBarButtonItem.appearance(whenContainedInInstancesOf: [UISearchBar.self])
        appearance.setTitleTextAttributes(attributes, for: .normal)

        searchController.searchBar.placeholder = "Nombre de la canción"
        searchController.obscuresBackgroundDuringPresentation = false
        searchController.searchBar.barStyle = .black
        searchController.searchBar.barTintColor = .white
        searchController.searchBar.delegate = self

        navigationItem.searchController = searchController
        navigationItem.hidesSearchBarWhenScrolling = false

        definesPresentationContext = true
    }
}

extension SearchViewController: UISearchBarDelegate {
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        guard let term = searchBar.text?.lowercased() else {
            return
        }

        tableView.reloadData()
        hideNoResults()

        let request = Search.Request(searchTerm: term, page: 1)
        interactor?.startSearch(request: request)
    }

    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        medias = []

        tableView.reloadData()
        hideNoResults()
    }
}
