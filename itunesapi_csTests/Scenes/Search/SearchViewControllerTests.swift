//
//  SearchViewControllerTests.swift
//  itunesapi_cs
//
//  Created by Alejandro Melo Domínguez on 7/27/19.
//  Copyright (c) 2019 Alejandro Melo Domínguez. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import itunesapi_cs
import XCTest

class SearchViewControllerTests: XCTestCase {
    // MARK: Subject under test
    var sut: SearchViewController!
    var window: UIWindow!

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupSearchViewController()
    }

    override func tearDown() {
        window = nil
        super.tearDown()
    }

    // MARK: Test setup
    
    func setupSearchViewController() {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "SearchViewController", bundle: bundle)
        sut = (storyboard.instantiateViewController(withIdentifier: "SearchViewController") as! SearchViewController)
    }

    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }

    // MARK: Tests

    func testDisplayResults() {
        // Given
        let medias = [
            Media(
                wrapperType: "wrapper type",
                artistName: "artist",
                collectionId: 1,
                collectionName: "collection name",
                kind: "kind",
                trackId: 1,
                trackName: "track 1",
                trackNumber: 1,
                artwork: "artwork",
                previewUrl: nil
            ),
            Media(
                wrapperType: "wrapper type",
                artistName: "artist",
                collectionId: 1,
                collectionName: "collection name",
                kind: "kind",
                trackId: 2,
                trackName: "track 2",
                trackNumber: 2,
                artwork: "artwork",
                previewUrl: nil
            )
        ]
        let viewModel = Search.ViewModel(medias: medias)

        // When
        sut.displayResults(viewModel: viewModel)

        // Then
        XCTAssertNotEqual(sut.medias.count, 0)
    }

    func testDisplayEmptyResults() {
        // Given
        let medias = [
            Media(
                wrapperType: "wrapper type",
                artistName: "artist",
                collectionId: 1,
                collectionName: "collection name",
                kind: "kind",
                trackId: 1,
                trackName: "track 1",
                trackNumber: 1,
                artwork: "artwork",
                previewUrl: nil
            )
        ]
        sut.medias = medias

        // When
        sut.displayNoResults()

        // Then
        XCTAssertEqual(sut.medias.count, 0)
    }
}
