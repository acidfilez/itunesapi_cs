//
//  SearchPresenterTests.swift
//  itunesapi_cs
//
//  Created by Alejandro Melo Domínguez on 7/27/19.
//  Copyright (c) 2019 Alejandro Melo Domínguez. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import itunesapi_cs
import XCTest

class SearchPresenterTests: XCTestCase {
    // MARK: Subject under test

    var sut: SearchPresenter!

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        setupSearchPresenter()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup

    func setupSearchPresenter() {
        sut = SearchPresenter()
    }

    // MARK: Tests

    func testDisplayResultsNonEmpty() {
        // Given
        let viewControllerSpy = SearchDisplayLogicSpy()
        sut.viewController = viewControllerSpy
        let medias = [
            Media(
                wrapperType: "wrapper type",
                artistName: "artist",
                collectionId: 1,
                collectionName: "collection name",
                kind: "kind",
                trackId: 1,
                trackName: "track 1",
                trackNumber: 1,
                artwork: "artwork",
                previewUrl: nil
            ),
            Media(
                wrapperType: "wrapper type",
                artistName: "artist",
                collectionId: 1,
                collectionName: "collection name",
                kind: "kind",
                trackId: 2,
                trackName: "track 2",
                trackNumber: 2,
                artwork: "artwork",
                previewUrl: nil
            )
        ]
        let response = Search.Response(medias: medias)

        // When
        sut.displayResults(response: response)

        // Then
        XCTAssertTrue(viewControllerSpy.displayResultsCalled)
    }

    func testDisplayResultsEmpty() {
        // Given
        let viewControllerSpy = SearchDisplayLogicSpy()
        sut.viewController = viewControllerSpy
        let medias: [Media] = []
        let response = Search.Response(medias: medias)

        // When
        sut.displayResults(response: response)

        // Then
        XCTAssertTrue(viewControllerSpy.displayNoResultsCalled)
    }

    func testDisplayMediaDetails() {
        // Given
        let viewControllerSpy = SearchDisplayLogicSpy()
        sut.viewController = viewControllerSpy

        let media = Media(
            wrapperType: "wrapper type",
            artistName: "artist",
            collectionId: 1,
            collectionName: "collection name",
            kind: "kind",
            trackId: 1,
            trackName: "track 1",
            trackNumber: 1,
            artwork: "artwork",
            previewUrl: nil
        )
        let response = Search.DetailsResponse(media: media)

        // When
        sut.displayMediaDetails(response: response)

        // Then
        XCTAssertTrue(viewControllerSpy.routeToMediaDetailsCalled)
    }

    func testDisplayLoadingIndicator() {
        // Given
        let viewControllerSpy = SearchDisplayLogicSpy()
        sut.viewController = viewControllerSpy

        // When
        sut.displayLoadingIndicator()

        // Then
        XCTAssertTrue(viewControllerSpy.showLoadingIndicatorCalled)
    }

    func testDismissLoadingIndicator() {
        // Given
        let viewControllerSpy = SearchDisplayLogicSpy()
        sut.viewController = viewControllerSpy

        // When
        sut.dismissLoadingIndicator()

        // Then
        XCTAssertTrue(viewControllerSpy.hideLoadingIndicatorCalled)
    }
}
